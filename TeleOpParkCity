package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Gamepad;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;


@TeleOp(name = "Driver", group =  "Telep")
public class TeleOpBlackOpsFinal extends LinearOpMode {

    //Motors
    DcMotor lw;
    DcMotor rw;
    DcMotor blw;
    DcMotor brw;
    DcMotor in0;
    DcMotor in1;
    DcMotor shoot;

    //Servos
    Servo flick;
    CRServo in2;
    Servo arm;
    Servo fingers;
    Servo rotate;
    Servo drop;

    //Sensors
    GyroSensor gyro;

    //Speed
    double speedAdjust = 9;

    int notdone = 0;

    // Gyro settings (works fine but can be improved)
    // It is linear again because I forgot to save
    double adjSpeed = 0.027;
    double minTurn = 0.007;
    int windowSize = 1;
    int targetDegree = 0;
    // piecewise graph function settings
    int piecewiseWindow = 30;
    double piecewiseSpeed = 0.007517647057771725;
    double piecewiseMinTurn = 0.004;


    // Line to make the power variables public
    public double leftPower, rightPower, backLeftPower, backRightPower;

    // button variables used for button processing
    boolean bufferA = true;
    boolean toggleA = true;
    boolean bufferB = true;
    boolean toggleB = true;
    boolean bufferX = true;
    boolean toggleX = true;
    boolean bufferY = true;
    boolean toggleY = true;
    boolean bufferL = true;
    boolean toggleL = true;
    boolean bufferR = true;
    boolean toggleR = true;
    boolean triggerGyro = false;

    double timeA = 0;
    boolean timeAUpdate = true;
    double timeARunTime;
    double timeB = 0;
    boolean timeBUpdate = true;
    double timeBRunTime;


    // Function to make invalid degrees valid
    public int degreeCalc(int degree){
        int returnDegree = degree;
        if(returnDegree < 0){
            returnDegree = returnDegree + 360;
        }
        if(returnDegree >= 360){
            returnDegree = returnDegree - 360;
        }
        return returnDegree;

    }

    // Turn function
    // when called to it sets the turn power variables to turn right the desired amount
    public void turnPower(double amount){
        // use a positive parameter to turn right (clockwise)
        // use a negative parameter to turn left (counterclockwise)
        leftPower += amount;
        rightPower -= amount;
        backLeftPower += amount;
        backRightPower -= amount;
    }


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        lw = hardwareMap.dcMotor.get("lw");
        rw = hardwareMap.dcMotor.get("rw");
        rw.setDirection(DcMotor.Direction.REVERSE);
        brw = hardwareMap.dcMotor.get("brw");
        brw.setDirection(DcMotor.Direction.REVERSE);
        blw = hardwareMap.dcMotor.get("blw");
        in0 = hardwareMap.dcMotor.get("ina");
        in1 = hardwareMap.dcMotor.get("inb");
        in1.setDirection(DcMotor.Direction.REVERSE);
        in2 = hardwareMap.crservo.get("inc");
        in2.setDirection(CRServo.Direction.FORWARD);
        shoot = hardwareMap.dcMotor.get("shoot");
        flick = hardwareMap.servo.get("flick");
        flick.setPosition(1);
        arm = hardwareMap.servo.get("arm");
        fingers = hardwareMap.servo.get("fingers");
        rotate = hardwareMap.servo.get("rotate");
        drop = hardwareMap.servo.get("drop");
        drop.setPosition(0.335);
        fingers.setPosition(.5);
        rotate.setPosition(.9);
        arm.setPosition(0.15);
        gyro = hardwareMap.gyroSensor.get("gyro");

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            int heading = gyro.getHeading();

            telemetry.addData("1. Heading: ", heading);


            telemetry.addData("rightControlX", gamepad1.right_stick_x);
            telemetry.addData("rightControlY", gamepad1.right_stick_y);
            telemetry.addData("Time", time);
            telemetry.addData("runtimeA", timeARunTime);
            telemetry.update();

            /*double adjSpeed = 0.027;
            double minTurn = 0.007;
            int windowSize = 1;
            int targetDegree = 0;
            // piecewise graph function settings
            int piecewiseWindow = 15;
            double piecewiseSpeed = 0.015;
            double piecewiseMinTurn = 0.004;
            if(!toggleA) {
                telemetry.addData("adjSpeed", adjSpeed);
                telemetry.addData("minTurn", minTurn);
                telemetry.addData("piecewiseSpeed", piecewiseSpeed);
                telemetry.addData("piecewiseMinTurn", piecewiseMinTurn);

                toggleB = true;
                toggleX = true;
                toggleY = true;
                toggleL = true;
                toggleR = true;
                adjSpeed += gamepad2.left_stick_y;
            }
            if(!toggleB){
                toggleA = true;
                toggleX = true;
                toggleY = true;
                toggleL = true;
                toggleR = true;
                minTurn += gamepad2.left_stick_y;
            }
            if(!toggleX){
                toggleA = true;
                toggleB = true;
                toggleY = true;
                toggleL = true;
                toggleR = true;
                piecewiseSpeed += gamepad2.left_stick_y;
            }
            if(!toggleY){
                toggleA = true;
                toggleB = true;
                toggleX = true;
                toggleL = true;
                toggleR = true;
                piecewiseMinTurn += gamepad2.left_stick_y;
            }
            if(!toggleL){
                toggleA = true;
                toggleB = true;
                toggleX = true;
                toggleR = true;
                windowSize += gamepad2.left_stick_y;
            }
            if(!toggleR){
                toggleA = true;
                toggleB = true;
                toggleX = true;
                toggleL = true;
                piecewiseWindow += gamepad2.left_stick_y;
            }



            if(gamepad2.a)
            {
                if(bufferA) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferA = false;
                    if (toggleA) {

                        toggleA = false;

                    } else {

                        toggleA = true;
                    }

                }
            } else {
                bufferA = true;
            }
            if(gamepad2.b)
            {
                if(bufferB) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferB = false;
                    if (toggleB) {

                        toggleB = false;

                    } else {

                        toggleB = true;
                    }

                }
            } else {
                bufferB = true;
            }

            if(gamepad2.x)
            {
                if(bufferX) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferX = false;
                    if (toggleX) {

                        toggleX = false;

                    } else {

                        toggleX = true;
                    }

                }
            } else {
                bufferX = true;
            }

            if(gamepad2.y)
            {
                if(bufferY) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferY = false;
                    if (toggleY) {

                        toggleY = false;

                    } else {

                        toggleY = true;
                    }

                }
            } else {
                bufferY = true;
            }

            if(gamepad2.left_trigger == 1)
            {
                if(bufferL) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferL = false;
                    if (toggleL) {

                        toggleL = false;

                    } else {

                        toggleL = true;
                    }

                }
            } else {
                bufferL = true;
            }

            if(gamepad2.right_trigger == 1)
            {
                if(bufferR) {
                    // This activates only once when a is pressed (not constantly when its pressed) and one time again when its pressed again and so on
                    bufferR = false;
                    if (toggleR) {

                        toggleR = false;

                    } else {

                        toggleR = true;
                    }

                }
            } else {
                bufferR = true;
            }
            */


            // Inputs to the motors
            leftPower = (-gamepad1.left_stick_y + gamepad1.left_stick_x + gamepad1.right_stick_x) * (-speedAdjust / 10);
            rightPower = (-gamepad1.left_stick_y - gamepad1.left_stick_x- gamepad1.right_stick_x) * (-speedAdjust / 10);
            backLeftPower = (-gamepad1.left_stick_y - gamepad1.left_stick_x+ gamepad1.right_stick_x) * (-speedAdjust / 10);
            backRightPower = (-gamepad1.left_stick_y + gamepad1.left_stick_x- gamepad1.right_stick_x) * (-speedAdjust / 10);
/*
            // targetDegree is currently affected by the right stick and it changes the degrees the robot goes towards
            targetDegree -= gamepad1.right_stick_x * 10;
            targetDegree = degreeCalc(targetDegree);

            if (degreeCalc(gyro.getHeading() - targetDegree) > windowSize + piecewiseWindow && degreeCalc(gyro.getHeading() - targetDegree) <= 180) {
                if ((Math.pow(degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed, 2)) >= minTurn) {
                    turnPower(-( Math.pow(degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed, 2)));
                }
                else{
                    turnPower(-minTurn);
                }
            }

            if (degreeCalc(gyro.getHeading() - targetDegree) < 360 - windowSize - piecewiseWindow && degreeCalc(gyro.getHeading() - targetDegree) > 180) {
                if ((Math.pow((360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed, 2) >= minTurn)) {
                    turnPower(Math.pow((360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed, 2));
                }
                else {
                    turnPower(minTurn);
                }
            }
            // Second graph function (piecewise) the one that is closer to 0 degrees
            if (degreeCalc(gyro.getHeading() - targetDegree) > windowSize && degreeCalc(gyro.getHeading() - targetDegree) <= piecewiseWindow + windowSize) {
                if ((Math.sqrt(degreeCalc(gyro.getHeading() - targetDegree) * piecewiseSpeed)) >= minTurn) {
                    turnPower(-(Math.sqrt(degreeCalc(gyro.getHeading() - targetDegree) * piecewiseSpeed)));
                }
                else {
                    turnPower(-minTurn);
                }
            }

            if (degreeCalc(gyro.getHeading() - targetDegree) < 360 - windowSize && degreeCalc(gyro.getHeading() - targetDegree) > 360 - piecewiseWindow - windowSize) {
                if (Math.sqrt((360 - degreeCalc(gyro.getHeading() - targetDegree)) * piecewiseSpeed) >= minTurn) {
                    turnPower(Math.sqrt((360 - degreeCalc(gyro.getHeading() - targetDegree)) * piecewiseSpeed) + piecewiseMinTurn);
                }
                else {
                    turnPower(minTurn);
                }
            }

            lw.setPower(leftPower);
            rw.setPower(rightPower);
            blw.setPower(backLeftPower);
            brw.setPower(backRightPower);
            */

            double intakeSpeed = -.9;

            if (gamepad1.dpad_right || triggerGyro)
            {
                while (degreeCalc(gyro.getHeading() - targetDegree) > 1 && degreeCalc(gyro.getHeading() - targetDegree) < 180)
                {
                    lw.setPower(-0.3);
                    rw.setPower(0.3);
                    blw.setPower(-0.3);
                    brw.setPower(0.3);
                }
                while (degreeCalc(gyro.getHeading() - targetDegree) >= 180 && degreeCalc(gyro.getHeading() - targetDegree) < 359)
                {
                    lw.setPower(0.3);
                    rw.setPower(-0.3);
                    blw.setPower(0.3);
                    brw.setPower(-0.3);
                }
            }
            if (gamepad1.dpad_up == true) {
                in0.setPower(intakeSpeed);
                in1.setPower(-.675);
                in2.setPower(1);
            }
            if (gamepad1.dpad_down == true) {
                in0.setPower(0);
                in1.setPower(0);
                in2.setPower(0);
            }
            if (gamepad1.dpad_left)
            {
                in0.setPower(-intakeSpeed);
                in1.setPower(.6);
                in2.setPower(-1);
            }
            

            if(gamepad1.right_bumper){
                shoot.setPower(.625);
            }

            if(gamepad1.left_bumper){

            }
            if (gamepad1.a){
                shoot.setPower(0.61);
            } else if (gamepad1.y){
                shoot.setPower(.575);
            }else if (gamepad1.x){
                shoot.setPower(0);
            }

            if(gamepad1.b){
                flick.setPosition(0.4);
                sleep(50);
                flick.setPosition(1);
                sleep(100);
            }

            if(gamepad1.left_trigger != 0){
                for(int i = 0; i < 3; i++)
                {
                    flick.setPosition(0.4);
                    double shootPower = shoot.getPower() + .05;
                    sleep(50);
                    flick.setPosition(1);
                    sleep(400);
                    shoot.setPower(shootPower);
                }
            }

            if(gamepad2.a){
                fingers.setPosition(.5);
            }
            if(gamepad2.b){
                fingers.setPosition(.94);
            }
            if(gamepad2.dpad_down){
                rotate.setPosition(.9);
                arm.setPosition(0.15);
            }
            if(gamepad2.dpad_up){
                rotate.setPosition(0.2);
                arm.setPosition(1);
            }
            if(gamepad2.y){
                drop.setPosition(1);
            }
            if(gamepad2.right_bumper){
                shoot.setPower(-.6);
            }
        }
    }
}
