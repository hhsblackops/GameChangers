package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.GyroSensor;

@Autonomous(name="BlackOps", group="AutoDrive")
public class BlackOps extends LinearOpMode {

    DcMotor leftWheel;
    DcMotor rightWheel;
    DcMotor backRightWheel;
    DcMotor backLeftWheel;
    //DcMotor intake;
    CRServo servo0;
    GyroSensor gyro;

    @Override
    public void runOpMode() throws InterruptedException {
        Init();

        waitForStart();

        while (opModeIsActive()){
            int heading = gyro.getHeading();
            int xVal = gyro.rawX();
            int yVal = gyro.rawY();
            int zVal = gyro.rawZ();

            telemetry.addData("1. Heading: ", heading);
            telemetry.addData("2. X: ", xVal);
            telemetry.addData("2. Y: ", yVal);
            telemetry.addData("2. Z: ", zVal);

            telemetry.update();
        }

    }
    //Drive stop
    public void stopDrive(){
        leftWheel.setPower(0);
        rightWheel.setPower(0);
        backLeftWheel.setPower(0);
        backRightWheel.setPower(0);
    }
    //public void servoSet0(){ servo0.setPosition(0); }
    //public void servoSet1(){ servo0.setPosition(1); }
    //Drive needing time and power
    public void Drive(double a, double b, double c, double d, int time) {
        leftWheel.setPower(a);
        backLeftWheel.setPower(b);
        rightWheel.setPower(c);
        backRightWheel.setPower(d);

        sleep(time);

        stopDrive();
    }
    //Drive set power needs time
    public void Drive(int time) {
        leftWheel.setPower(.5);
        backLeftWheel.setPower(.5);
        rightWheel.setPower(.5);
        backRightWheel.setPower(.5);

        sleep(time);

        stopDrive();
    }
    //Rotate right 90
    public void RightNine(){
        leftWheel.setPower(.5);
        backLeftWheel.setPower(.5);
        rightWheel.setPower(-.5);
        backRightWheel.setPower(-.5);

        sleep(1055);

        stopDrive();
    }
    // Rotate left 90
    public void LeftNine() {
        leftWheel.setPower(-.5);
        backLeftWheel.setPower(-.5);
        rightWheel.setPower(.5);
        backRightWheel.setPower(.5);

        sleep(1055);

        stopDrive();
    }
    //Backwards drive set power needs time
    public void BackwardDrive(int time) {
        leftWheel.setPower(-.5);
        backLeftWheel.setPower(-.5);
        rightWheel.setPower(-.5);
        backRightWheel.setPower(-.5);

        sleep(time);

        stopDrive();
    }
    //Mecanum going right needs time
    public void RightSideDrive(int time) {
        leftWheel.setPower(.5);
        backLeftWheel.setPower(-.5);
        rightWheel.setPower(-.5);
        backRightWheel.setPower(.5);

        sleep(time);

        stopDrive();
    }
    //Mecanum going left needs time
    public void LeftSideDrive(int time) {
        leftWheel.setPower(-.5);
        backLeftWheel.setPower(.5);
        rightWheel.setPower(.5);
        backRightWheel.setPower(-.5);

        sleep(time);

        stopDrive();
    }
    // Initilize
    public void Init(){
        leftWheel = hardwareMap.dcMotor.get("left_drive");
        rightWheel = hardwareMap.dcMotor.get("right_drive");
        backRightWheel = hardwareMap.dcMotor.get("back_right_drive");
        backLeftWheel = hardwareMap.dcMotor.get("back_left_drive");
        //intake = hardwareMap.dcMotor.get("intake");
        rightWheel.setDirection(DcMotor.Direction.REVERSE);
        backRightWheel.setDirection(DcMotor.Direction.REVERSE);
        servo0 = hardwareMap.crservo.get("servo_0");
        gyro = hardwareMap.gyroSensor.get("gyro");
        gyro.calibrate();
        //opd = hardwareMap.opticalDistanceSensor.get("opd_sensor");
        //opd.enableLed(true);
    }
    public void FullPowerDrive(int time) {
        leftWheel.setPower(.1);
        backLeftWheel.setPower(.1);
        rightWheel.setPower(.1);
        backRightWheel.setPower(.1);

        sleep(10);

        leftWheel.setPower(.2);
        backLeftWheel.setPower(.2);
        rightWheel.setPower(.2);
        backRightWheel.setPower(.2);

        sleep(10);

        leftWheel.setPower(.3);
        backLeftWheel.setPower(.3);
        rightWheel.setPower(.3);
        backRightWheel.setPower(.3);

        sleep(10);

        leftWheel.setPower(.4);
        backLeftWheel.setPower(.4);
        rightWheel.setPower(.4);
        backRightWheel.setPower(.4);

        sleep(10);

        leftWheel.setPower(.5);
        backLeftWheel.setPower(.5);
        rightWheel.setPower(.5);
        backRightWheel.setPower(.5);

        sleep(10);

        leftWheel.setPower(.6);
        backLeftWheel.setPower(.6);
        rightWheel.setPower(.6);
        backRightWheel.setPower(.6);

        sleep(10);

        leftWheel.setPower(.7);
        backLeftWheel.setPower(.7);
        rightWheel.setPower(.7);
        backRightWheel.setPower(.7);

        sleep(10);

        leftWheel.setPower(.8);
        backLeftWheel.setPower(.8);
        rightWheel.setPower(.8);
        backRightWheel.setPower(.8);

        sleep(10);

        leftWheel.setPower(.9);
        backLeftWheel.setPower(.9);
        rightWheel.setPower(.9);
        backRightWheel.setPower(.9);

        sleep(100);

        leftWheel.setPower(1);
        backLeftWheel.setPower(1);
        rightWheel.setPower(1);
        backRightWheel.setPower(1);

        sleep(time-350);

        leftWheel.setPower(.75);
        backLeftWheel.setPower(.75);
        rightWheel.setPower(.75);
        backRightWheel.setPower(.75);

        sleep(25);

        leftWheel.setPower(.5);
        backLeftWheel.setPower(.5);
        rightWheel.setPower(.5);
        backRightWheel.setPower(.5);

        sleep(25);

        leftWheel.setPower(.25);
        backLeftWheel.setPower(.25);
        rightWheel.setPower(.25);
        backRightWheel.setPower(.25);

        sleep(25);

        leftWheel.setPower(-.25);
        backLeftWheel.setPower(-.25);
        rightWheel.setPower(-.25);
        backRightWheel.setPower(-.25);

        sleep(75);

        stopDrive();
    }
    public void FullBackDrive(int time) {
        leftWheel.setPower(-.1);
        backLeftWheel.setPower(-.1);
        rightWheel.setPower(-.1);
        backRightWheel.setPower(-.1);

        sleep(10);

        leftWheel.setPower(-.2);
        backLeftWheel.setPower(-.2);
        rightWheel.setPower(-.2);
        backRightWheel.setPower(-.2);

        sleep(10);

        leftWheel.setPower(-.3);
        backLeftWheel.setPower(-.3);
        rightWheel.setPower(-.3);
        backRightWheel.setPower(-.3);

        sleep(10);

        leftWheel.setPower(-.4);
        backLeftWheel.setPower(-.4);
        rightWheel.setPower(-.4);
        backRightWheel.setPower(-.4);

        sleep(10);

        leftWheel.setPower(-.5);
        backLeftWheel.setPower(-.5);
        rightWheel.setPower(-.5);
        backRightWheel.setPower(-.5);

        sleep(10);

        leftWheel.setPower(-.6);
        backLeftWheel.setPower(-.6);
        rightWheel.setPower(-.6);
        backRightWheel.setPower(-.6);

        sleep(10);

        leftWheel.setPower(-.7);
        backLeftWheel.setPower(-.7);
        rightWheel.setPower(-.7);
        backRightWheel.setPower(-.7);

        sleep(10);

        leftWheel.setPower(-.8);
        backLeftWheel.setPower(-.8);
        rightWheel.setPower(-.8);
        backRightWheel.setPower(-.8);

        sleep(10);

        leftWheel.setPower(-.9);
        backLeftWheel.setPower(-.9);
        rightWheel.setPower(-.9);
        backRightWheel.setPower(-.9);

        sleep(10);

        leftWheel.setPower(-1);
        backLeftWheel.setPower(-1);
        rightWheel.setPower(-1);
        backRightWheel.setPower(-1);

        sleep(time - 200);

        leftWheel.setPower(-.75);
        backLeftWheel.setPower(-.75);
        rightWheel.setPower(-.75);
        backRightWheel.setPower(-.75);

        sleep(25);

        leftWheel.setPower(-.5);
        backLeftWheel.setPower(-.5);
        rightWheel.setPower(-.5);
        backRightWheel.setPower(-.5);

        sleep(25);

        leftWheel.setPower(-.25);
        backLeftWheel.setPower(-.25);
        rightWheel.setPower(-.25);
        backRightWheel.setPower(-.25);

        sleep(25);

        leftWheel.setPower(.25);
        backLeftWheel.setPower(.25);
        rightWheel.setPower(.25);
        backRightWheel.setPower(.25);

        sleep(75);
        
        stopDrive();
    }
    public void FullCross() {
        FullPowerDrive(2625);

    }
    public void FullHalfCross() { Drive(5400); }
    public void Striaght( int duration, double power){
        gyro.resetZAxisIntegrator();

        double leftSpeed;
        double rightSpeed;
        double backLeftSpeed;
        double backRightSpeed;

        double target = gyro.getHeading();
        double start = leftWheel.getCurrentPosition();

        while (leftWheel.getCurrentPosition() < duration + start){
            int heading = gyro.getHeading();

            leftSpeed = power + (heading - target);
            backLeftSpeed = power + (heading - target);
            rightSpeed = power + (heading + target);
            backRightSpeed = power + (heading + target);

            leftWheel.setPower(leftSpeed);
            backLeftWheel.setPower(backLeftSpeed);
            rightWheel.setPower(rightSpeed);
            backRightWheel.setPower(backRightSpeed);

            telemetry.addData("1. Left Power: ", leftWheel.getPower());
            telemetry.addData("2. Right Power: ", rightWheel.getPower());
            telemetry.addData("3. Distance: ", (duration + start) - leftWheel.getCurrentPosition());
            sleep(1);
        }

    }
    boolean LedOn = true;
    boolean LedOff = false;
}

/*
NOTES
Time for one square at 1/2 power = 1150
Time for two squares at 1/2 power = 2450
Any 90 degree turn at 1/2 power = 1200 for time
For side drive at 1/2 power = 1400 for time
Backward drive one swquare at 1/2 power = 1025
servo0.setPosition(0); or servo0.setPosition(1); or anywhere from 0-1
*/
