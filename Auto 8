package  org.firstinspires.ftc.teamcode.TeleOp;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Gamepad;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name = "Driver", group =  "Telep")
public class TeleOpBlackOps extends LinearOpMode {

    //Motors
    DcMotor lw;
    DcMotor rw;
    DcMotor blw;
    DcMotor brw;
    DcMotor in0;
    DcMotor in1;
    DcMotor shoot;

    //Servos
    Servo flick;
    Servo wob;

    //Sensors
    GyroSensor gyro;

    //Speed
    double speedAdjust = 7.5;

    // Gyro settings
    double adjSpeed = 0.025;
    double minTurn = 0.007;
    int windowSize = 1;
    int targetDegree = 0;

    // Function to make invalid degrees valid
    public int degreeCalc(int degree){
        int returnDegree = degree;
        if(returnDegree < 0){
            returnDegree = returnDegree + 360;
        }
        if(returnDegree >= 360){
            returnDegree = returnDegree - 360;
        }
        return returnDegree;

    }


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        lw = hardwareMap.dcMotor.get("lw");
        rw = hardwareMap.dcMotor.get("rw");
        rw.setDirection(DcMotor.Direction.REVERSE);
        brw = hardwareMap.dcMotor.get("brw");
        brw.setDirection(DcMotor.Direction.REVERSE);
        blw = hardwareMap.dcMotor.get("blw");
        in0 = hardwareMap.dcMotor.get("ina");
        in1 = hardwareMap.dcMotor.get("inb");
        in1.setDirection(DcMotor.Direction.REVERSE);
        shoot = hardwareMap.dcMotor.get("shoot");
        flick = hardwareMap.servo.get("flick");
        flick.setPosition(1);
        //wob = hardwareMap.dcMotor.get("wob");
        gyro = hardwareMap.gyroSensor.get("gyro");
        gyro.calibrate();

        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            int heading = gyro.getHeading();
            int xVal = gyro.rawX();
            int yVal = gyro.rawY();
            int zVal = gyro.rawZ();

            telemetry.addData("1. Heading: ", heading);
            telemetry.addData("2. X: ", xVal);
            telemetry.addData("2. Y: ", yVal);
            telemetry.addData("2. Z: ", zVal);

            telemetry.addData("rightControlX", gamepad1.right_stick_x);
            telemetry.addData("rightControlY", gamepad1.right_stick_y);


            // Inputs to the motors
            double lw = (-gamepad1.left_stick_y + gamepad1.left_stick_x) * (-speedAdjust / 10);
            double rw = (-gamepad1.left_stick_y - gamepad1.left_stick_x) * (-speedAdjust / 10);
            double blw = (-gamepad1.left_stick_y - gamepad1.left_stick_x) * (-speedAdjust / 10);
            double brw = (-gamepad1.left_stick_y + gamepad1.left_stick_x) * (-speedAdjust / 10);

            // targetDegree is currently affected by the right stick and it changes the degrees the robot goes towards
/*

            // This does not work right now
            if ((gyro.getHeading() >  degree + windowSize && gyro.getHeading() <= degreeCalc(180)||(gyro.getHeading() > degreeCalc(windowSize)))) {
                lw -= Math.abs(degree - gyro.getHeading()) * adjSpeed + minTurn;
                rw += Math.abs(degree - gyro.getHeading()) * adjSpeed + minTurn;
                blw -= Math.abs(degree - gyro.getHeading()) * adjSpeed + minTurn;
                brw += Math.abs(degree - gyro.getHeading()) * adjSpeed + minTurn;
            }

            if ((gyro.getHeading() > degreeCalc(180) && gyro.getHeading() < degree-windowSize) || (gyro.getHeading() < degreeCalc(-windowSize))) {
                lw += degreeCalc(degree + 360 - gyro.getHeading()) * adjSpeed + minTurn;
                rw -= degreeCalc(degree + 360 - gyro.getHeading()) * adjSpeed + minTurn;
                blw += degreeCalc(degree + 360 - gyro.getHeading()) * adjSpeed + minTurn;
                brw -= degreeCalc(degree + 360 - gyro.getHeading()) * adjSpeed + minTurn;
            }

 */
            if (degreeCalc(gyro.getHeading() - targetDegree) > 0 + windowSize && degreeCalc(gyro.getHeading() - targetDegree) <= 180) {
                lw -= degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed + minTurn;
                rw += degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed + minTurn;
                blw -= degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed + minTurn;
                brw += degreeCalc(gyro.getHeading() - targetDegree) * adjSpeed + minTurn;
            }
            if (degreeCalc(gyro.getHeading() - targetDegree) < 360 - windowSize && degreeCalc(gyro.getHeading() - targetDegree) > 180) {
                lw += (360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed + minTurn;
                rw -= (360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed + minTurn;
                blw += (360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed + minTurn;
                brw -= (360 - degreeCalc(gyro.getHeading() - targetDegree)) * adjSpeed + minTurn;
            }


            double intakeSpeed = .75;

            if (gamepad1.dpad_up == true) {
                in0.setPower(intakeSpeed);
                in1.setPower(intakeSpeed);
            }
            if (gamepad1.dpad_down == true) {
                in0.setPower(0);
                in1.setPower(0);
            }
            int tru = 0;
            if (gamepad1.dpad_right == true && tru == 0) {
                shoot.setPower(1);
            }
            if (gamepad1.a == true) {
                flick.setPosition(.8);
                sleep(500);
                flick.setPosition(1);
            }
            if (gamepad1.dpad_left == true) {
                shoot.setPower(0);
            }
        }
    }
}


